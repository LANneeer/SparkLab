from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext

from bot.infrastructure.keyboards.default.user import user_menu
from bot.infrastructure.states.main import CommentState
from rides.models import RideRequest
from users.models import User, Comment

router = Router(name='payment')


@router.callback_query(F.data.startswith('confirm'))
async def confirm_ride(call: types.CallbackQuery):
    ride = RideRequest.objects.get(id=call.data.split('_')[1])
    user = ride.user
    if ride.status == 'pending':
        ride.status = 'approved'
        ride.save()
        await call.bot.send_message(
            chat_id=user.telegram_id,
            text=f'–í–∞—à–∞ –ø–æ–µ–∑–¥–∫–∞ {ride.ride.ride_title} –∫ {ride.ride.departure.strftime("%d.%m.%Y %H:%M")} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n' \
                 f'–í–∞—à–∞ –ø–æ–µ–∑–¥–∫–∞ –æ—Ç KBTU DORM –¥–æ KBTU —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n' \
                 f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ –Ω–∞ —à–∞—Ç—Ç–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—ä–µ–¥–µ—Ç –∫ –≤–∞–º —Å —É–ª–∏—Ü—ã –ò—Å–ª–∞–º–∞ –ö–∞—Ä–∏–º–æ–≤–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –±—ã—Ç—å –Ω–∞ –º–µ—Å—Ç–µ –∑–∞ 5-10 –º–∏–Ω—É—Ç –¥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n' \
                 f'–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –≤—ã –æ–ø–æ–∑–¥–∞–µ—Ç–µ –Ω–∞ –ø–æ–µ–∑–¥–∫—É.\n' \
                 f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –æ–ø–ª–∞—Ç—ã –≤–æ–∑–º–æ–∂–µ–Ω –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±–æ–ª–µ–µ —á–µ–º –∑–∞ 12 —á–∞—Å–æ–≤ –¥–æ –ø–æ–µ–∑–¥–∫–∏, –Ω–æ –º—ã —Ç–∞–∫–∂–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –≤—Å–µ —Å–ª—É—á–∞–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.\n' \
                 f'–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ /help.\n' \
                 f'–ñ–µ–ª–∞–µ–º –≤–∞–º –ø—Ä–∏—è—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∞–º!üöÄ\n\n' \
                 f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á—Ç–æ –≤—ã —Å–µ–ª–∏ –Ω–∞ –º–µ—Å—Ç–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –Ω–∞ –º–µ—Å—Ç–µ" –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è.',
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text='–Ø –Ω–∞ –º–µ—Å—Ç–µ', callback_data=f'arrived_{ride.id}')
                    ]
                ]
            )
        )
        await call.answer('–ü–æ–µ–∑–¥–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
    else:
        await call.answer(f'–ü–æ–µ–∑–¥–∫–∞ —É–∂–µ {ride.status}')


@router.callback_query(F.data.startswith('decline'))
async def decline_ride(call: types.CallbackQuery):
    ride = RideRequest.objects.get(id=call.data.split('_')[1])
    user = ride.user
    if ride.status == 'pending':
        ride.status = 'rejected'
        ride.save()
        await call.bot.send_message(
            chat_id=user.telegram_id,
            text=f'–í–∞—à–∞ –ø–æ–µ–∑–¥–∫–∞ {ride.ride.ride_title} –∫ {ride.ride.departure.strftime("%d.%m.%Y %H:%M")} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.'
        )
        await call.answer('–ü–æ–µ–∑–¥–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
    else:
        await call.answer(f'–ü–æ–µ–∑–¥–∫–∞ —É–∂–µ {ride.status}')


@router.callback_query(F.data.startswith('arrived'))
async def arrived_ride(call: types.CallbackQuery):
    ride = RideRequest.objects.get(id=call.data.split('_')[1])
    user = ride.user
    if ride.status == 'approved':
        ride.status = 'arrived'
        ride.save()
        await call.bot.send_message(
            chat_id=user.telegram_id,
            text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –ü—Ä–∏—è—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏!\n\n' \
                 f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –ø–æ–µ–∑–¥–∫–µ —Å –Ω–∞–º–∏, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É–ª—É—á—à–∏—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å.',
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data='leave_review')
                    ]
                ]
            )
        )
    else:
        await call.answer(f'–ü–æ–µ–∑–¥–∫–∞ —É–∂–µ {ride.status}')


@router.callback_query(F.data == 'leave_review')
async def leave_review(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(
        text='–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –ø–æ–µ–∑–¥–∫–µ:',
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(CommentState.comment)
    await call.answer()


@router.message(CommentState.comment)
async def review(message: types.Message, state: FSMContext):
    Comment.objects.create(
        user=User.objects.get(telegram_id=message.from_user.id),
        comment=message.text
    )
    await message.answer(
        text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å.',
        reply_markup=user_menu
    )
    await state.clear()
